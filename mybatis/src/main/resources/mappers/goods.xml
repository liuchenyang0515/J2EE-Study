<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <!-- 开启了二级缓存
        eviction是缓存的清除策略，当缓存对象数量达到上限后，自动触发对应算法对缓存对象清除
        1.LRU - 最近最久未使用：移除最长时间不被使用的对象
        O1  O2  O3  O4  ..  O512
        14  99  83  1       893
        2.FIFO - 先进先出：按对象进入缓存的顺序来移除他们
        3.SOFT - 软引用：移除基于垃圾收集器状态和软引用规则的对象
        4.WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象。

        flushInterval  代表间隔多长时间自动清空缓存，单位毫秒，600000毫秒=10分钟
        size  缓存存储上限，用于保存对象或集合(1个集合算一个对象)的数量上限
        readOnly  设置为true，代表返回只读缓存，每次从缓存取出的是缓存对象本身，这种执行效率较高
                  设置为false，代表每次取出的是缓存对象的“副本”，每一次取出的对象都是不同的，这种安全性较高

    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
    <!-- useCache="false"代表不使用缓存 -->
    <select id="selectAll" resultType="com.me.mybatis.entity.Goods" useCache="false">
        select *
        from t_goods
        order by goods_id desc limit 10
    </select>
    <!-- 单参数传递，使用parameterType指定参数的数据类型即可，SQL中#{value}提取参数-->
    <select id="selectById" parameterType="Integer" resultType="com.me.mybatis.entity.Goods">
        select *
        from t_goods
        where goods_id = #{value}
    </select>
    <!-- 多参数传递时，使用parameterType指定Map接口，SQL中#{key}提取参数-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.me.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price limit 0, #{limit}
    </select>
    <!-- 利用LinkedHashMap保存多表关联结果
        MyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名，value是字段对应的值，字段类型根据表结构进行自动判断
        优点：易于扩展，易于使用
        缺点：太过灵活，无法进行编译时检查
    -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!-- 结果映射 -->
    <resultMap id="rmGoods" type="com.me.mybatis.dto.GoodsDTO">
        <!-- 设置主键字段与属性映射 -->
        <id property="goods.goodsId" column="goods_id"></id>
        <!-- 设置非主键字段与属性映射 -->
        <result property="goods.title" column="title"></result>
        <result property="goods.subTitle" column="sub_title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <!-- 这里是不同对象的属性，一个是goods对象，一个是category对象，详见GoodsDTO-->
        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>
        <result property="test" column="test"></result>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.*, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--
        selectKey标签需明确编写获取最新主键的SQL语句
        useGeneratedKeys属性会自动根据驱动生成对应SQL语句，数据库类型变化也会跟着自动变化

        selectKey适用于所有的关系型数据库
        useGeneratedKeys只支持“自增主键”类型的数据库，使用简单，比如MYSQL，SQLServer，但是Oracle、DB2不支持，所以不能使用
        在Oracle中只能用selectKey了

        selectKey适用于所有数据库，但是编写麻烦
     -->
    <!--    <insert id="insert" parameterType="com.me.mybatis.entity.Goods"-->
    <!--            useGeneratedKeys="true"-->
    <!--            keyProperty="goodsId"-->
    <!--            keyColumn="goods_id">-->

    <!-- flushCache="true"在sql执行后强制清空缓存,不用等待commit之后才清空，效果和commit相同 -->
    <insert id="insert" parameterType="com.me.mybatis.entity.Goods"
            flushCache="true">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
        <!-- keyProperty对应哪个属性值，order表示在insert语句之前还是之后执行，最后把数据回填到keyProperty对应字段中 -->
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="update" parameterType="com.me.mybatis.entity.Goods">
        update t_goods
        set title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        where goods_id = #{goodsId}
    </update>

    <delete id="delete" parameterType="Integer">
        delete
        from t_goods
        where goods_id = #{value}
    </delete>

    <select id="selectByTitle" parameterType="java.util.Map" resultType="com.me.mybatis.entity.Goods">
        select *
        from t_goods
        where title = #{title} ${order}
    </select>

    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.me.mybatis.entity.Goods">
        select * from t_goods
        <!-- 如果写where而不是<where>，则需要加上1=1，因为<if>里面的sql条件都有and，
        这里用<where>根据查询条件，动态筛选语句, 保证语法正确，可以动态去掉前面的and -->
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>
    <!--
        resultMap可用于说明一对多或者多对一的映射逻辑
        id是resultMap属性引用的标志
        type指向One的实体(Goods)
    -->
    <resultMap id="rmGoods1" type="com.me.mybatis.entity.Goods">
        <!-- 映射goods对象的主键到goods_id字段 -->
        <id column="goods_id" property="goodsId"></id>
        <!--
            collection的含义是在
            select * from t_goods limit 0, 2 得到结果后，对所有的Goods对象遍历得到goods_id(colum)字段值，
            并代入到goodsDetail命名空间的selectByGoodsId的SQL中查询，
            将得到的"商品详情"集合赋值给goodsDetails
        -->
        <collection property="goodsDetails" select="goodsDetail.selectByGoodsId"
                    column="goods_id"></collection>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        select *
        from t_goods limit 0, 2
    </select>

    <select id="selectPage" resultType="com.me.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price &lt; 1000
    </select>

    <insert id="batchInsert" parameterType="java.util.List">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values
        <!-- 这个collection="list"的list是mybatis强制要求，不能随意修改
            separator="," 数据用逗号分隔，最后一条记录不会增加","
            这里每个item就是一个Goods实体对象
         -->

        <!--
            批量插入数据的局限:
            1.无法获得插入数据的id
            2.批量生成的SQL太长，可能会被服务器拒绝
            建议提前做好压力测试
            解决方法：比如1000W数据，可以分段插入，1000组10000条数据来执行，这肯定比1000W条数据单条插入快得多

        -->
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title}, #{item.subTitle}, #{item.originalCost}, #{item.currentPrice},
            #{item.discount}, #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>

    <!-- 批量删除可以考虑类似于下面形式
        delete from t_goods where goods_id in (1920, 1921)
        尽量不要拆分成多条SQL删除语句
    -->
    <delete id="batchDelete" parameterType="java.util.List">
        delete
        from t_goods
        where goods_id in
        <!-- open="(" close=")"是为了动态生成in子句，比如in (1901, 1902) -->
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
</mapper>